var io = io ? io : {};
io.mamuso = io.mamuso ? io.mamuso : {};

io.mamuso.tools = {
  
  // -------------------------------------------------------------------
  // Find an object by name in a given scope
  // -------------------------------------------------------------------
  findObjectsByName: function(name,scope) {
    var predicate = NSPredicate.predicateWithFormat("name == %@",name);
    return scope.filteredArrayUsingPredicate(predicate);
  },

  // -------------------------------------------------------------------
  // Find an object by type in a given scope
  // -------------------------------------------------------------------
  findObjectsOfType: function(classType,scope) {
    var predicate = NSPredicate.predicateWithFormat("self isKindOfClass: %@",classType);
    return scope.filteredArrayUsingPredicate(predicate);
  },

  // -------------------------------------------------------------------
  // Get the solid color of a shape
  // -------------------------------------------------------------------
  getColor: function(object) {
    try{
      var fills = object.style().fills();
      if (fills.count() > 0 && fills.firstObject().fillType() == 0) { 
        return "#" + fills.firstObject().color().hexValue().toString();
      }
    } catch (e) {
      return nil;
    }
  },

  // -------------------------------------------------------------------
  // Make slice and export (CHECK DEPRECATIONS)
  // -------------------------------------------------------------------
  sliceAndExport: function(obj, filename) {
    var rect = MSSliceTrimming.trimmedRectForLayerAncestry(obj),
    slice = MSExportRequest.requestWithRect_scale(rect, io.mamuso.config.scale);
    io.mamuso.config.doc.saveArtboardOrSlice_toFile(slice, filename);
  },

  // -------------------------------------------------------------------
  // Export artboard with global scale factor
  // -------------------------------------------------------------------
  exportArtboard: function(obj, filename) {
    var slice = obj.duplicate();
    slice.multiplyBy(io.mamuso.config.scale);
    // DIRTY HACK, clean ASAP
    slice.frame().midX = -90000000000;
    slice.frame().midY = -90000000000;     
    io.mamuso.config.doc.saveArtboardOrSlice_toFile(slice, filename);
    slice.removeFromParent();
  },

  // -------------------------------------------------------------------
  // Let the user specify a directory
  // -------------------------------------------------------------------
  getDirFromPrompt: function() {
    var panel = [NSOpenPanel openPanel];
    [panel setMessage:"ðŸŽŸ Where do you want to export the documentation?"];
    [panel setCanChooseDirectories: true];
    [panel setCanChooseFiles: false];
    [panel setCanCreateDirectories: true];
    var defaultDir = io.mamuso.config.doc.fileURL().URLByDeletingLastPathComponent();
    [panel setDirectoryURL:defaultDir];
    if ([panel runModal] == NSOKButton) {
      var message = [panel filename];
      return message;
    } else {
      return null;
    }
  },

  // -------------------------------------------------------------------
  // Import Frameworks
  // -------------------------------------------------------------------
  loadFramework: function(pluginRoot, frameworkName) {
    if (NSClassFromString(frameworkName) == null) {
      var mocha = [Mocha sharedRuntime];
      return [mocha loadFrameworkWithName:frameworkName inDirectory:pluginRoot];
    } else {
      return true;
    }
  },

  // -------------------------------------------------------------------
  // Text to Markdown
  // -------------------------------------------------------------------
  markdownToHTML: function(text) {
    var html = [MMMarkdown HTMLStringWithMarkdown:text extensions:[1 << 0|1 << 3|1 << 5|1 << 6|1 << 8|1 << 9] error:null];
    return html;
  }
};